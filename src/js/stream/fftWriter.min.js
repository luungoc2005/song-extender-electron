function createSourceBuffer(e){switch(n){case 8:return a?new Int8Array(e.buffer):new Uint8Array(e.buffer);case 16:return a?new Int16Array(e.buffer):new Uint16Array(e.buffer);case 32:return a?new Int32Array(e.buffer):new Uint32Array(e.buffer);default:return new Int16Array(e.buffer)}}function createEmptyBuffer(e){switch(n){case 8:return a?new Int8Array(e):new Uint8Array(e);case 16:return a?new Int16Array(e):new Uint16Array(e);case 32:return a?new Int32Array(e):new Uint32Array(e);default:return new Int16Array(e)}}const e=require("stream").Writable,r=require("util"),t=require("./dsp.min.js");let n,f,a,i,u,s,c;var fftWriter=function(r,l){n=r.bitDepth,f=r.channels,a=r.signed,i=r.sampleRate,u=l,s=new t.FFT(u,i),e.call(this,{objectMode:!0}),c=this};module.exports=fftWriter,r.inherits(fftWriter,e);let l=[],w=[];fftWriter.prototype._write=function(e,r,t){for(w=createSourceBuffer(e);w.length>0;){if(!l||l.length>=u)w.length>u?(l=w.slice(0,u),w=w.slice(u)):(l=w,w=[]);else{var n=createEmptyBuffer(Math.min(u,l.length+w.length)),f=n.length-l.length;n.set(l),n.set(w.slice(0,f),l.length),w=w.slice(f),l=n}if(l.length==u){for(var a=0,i=0;i<u;i++)a+=Math.abs(l[i]);s.forward(l);var h=s.spectrum;c.emit("fft",{fft:h,total:a})}}t()};